# 1. Реализовать класс Matrix (матрица).
# Обеспечить перегрузку конструктора класса (метод init()),
# который должен принимать данные (список списков) для формирования матрицы.
# Подсказка: матрица — система некоторых математических величин,
# расположенных в виде прямоугольной схемы.
# Примеры матриц: см. в методичке.
#
# Следующий шаг — реализовать перегрузку метода
# str() для вывода матрицы в привычном виде.
# Далее реализовать перегрузку метода add()
# для реализации операции сложения двух объектов
# класса Matrix (двух матриц). Результатом сложения должна быть новая матрица.
# Подсказка: сложение элементов матриц
# выполнять поэлементно — первый элемент первой строки первой матрицы
# складываем с первым элементом первой строки второй матрицы и т.д.

y = [[35, 56, 38], [77, 65, 45]]
x = [[11, 32, 23], [34, 99, 67]]


class Matrix:
    def __init__(self, matrix):
        self.matrix = matrix

    def __add__(self, other):
        c = []
        for i in range(len(self.matrix)):
            c.append([])
            for j in range(len(self.matrix[0])):
                c[i].append(self.matrix[i][j] + other.matrix[i][j])
        return '\n'.join(map(str, c))

    def __str__(self):
        return '\n'.join(map(str, self.matrix))


mx_1 = Matrix(y)
mx_2 = Matrix(x)
print(f'Matrix 1\n{mx_1}\n{"-" * 20}')
print(f'Matrix 2\n{mx_2}\n{"-" * 20}')

# 2. Реализовать проект расчета суммарного расхода ткани на производство одежды.
# Основная сущность (класс) этого проекта — одежда, которая может иметь определенное название.
# К типам одежды в этом проекте относятся пальто и костюм.
# У этих типов одежды существуют параметры: размер (для пальто) и рост (для костюма).
# Это могут быть обычные числа: V и H, соответственно.
# Для определения расхода ткани по каждому типу одежды использовать формулы:
# для пальто (V/6.5 + 0.5), для костюма (2*H + 0.3).
# Проверить работу этих методов на реальных данных.
# Реализовать общий подсчет расхода ткани.
# Проверить на практике полученные на этом уроке знания:
# реализовать абстрактные классы для основных классов проекта, проверить на практике работу декоратора @property.

from abc import ABC, abstractmethod


class JobJob(ABC):
    @abstractmethod
    def op_fo(self):
        pass


class AJob(JobJob):
    def __init__(self, v):
        self.v = v

    @property
    def op_fo(self):
        V = self.v / 8.5 + 3.5
        return f'Ткань на пальто: {V}'


class BJob(JobJob):
    def __init__(self, h):
        self.h = h

    @property
    def op_fo(self):
        H = 2 * self.h + 0.5
        return f'Ткань на костюм: {H}'


class OJob(JobJob):
    def __init__(self, v, h):
        self.V = v
        self.H = h

    @property
    def op_fo(self):
        _a = (self.V / 8.5 + 3.5) + (2 * self.H + 0.5)
        return f'Всего ткани понадобится: {_a}'


aJob = AJob(70)
bJob = BJob(235)
oJob = OJob(70, 235)
print(aJob.op_fo)
print(bJob.op_fo)
print(oJob.op_fo)


